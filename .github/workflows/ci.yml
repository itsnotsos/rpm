name: Update .spec

on:
  repository_dispatch:
    types: [new-release]
  workflow_dispatch:

jobs:
  update-spec:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch latest release tag
        id: fetch_tag
        run: |
          latest_tag=$(curl -s https://api.github.com/repos/FajoX1/fagramdesktop/releases/latest | jq -r .tag_name)
          if [[ -z "$latest_tag" || "$latest_tag" == "null" ]]; then
            echo "Error: Failed to fetch the latest tag." >&2
            exit 1
          fi
          echo "Latest tag: $latest_tag"
          # Strip 'v' prefix if present and set it to GITHUB_ENV
          sanitized_tag="${latest_tag#v}"
          echo "Sanitized tag: $sanitized_tag"
          echo "tag=$sanitized_tag" >> $GITHUB_ENV

      - name: Download artifact from recent Linux workflow
        id: download_artifact
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p ./artifacts
          
          echo "Finding recent Linux workflow runs..."
          # Get all workflow runs without filtering by branch/tag
          workflow_runs=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/FajoX1/fagramdesktop/actions/workflows/linux.yml/runs?status=success&per_page=10")
          
          run_id=$(echo "$workflow_runs" | jq '.workflow_runs[0].id')
          
          if [ -z "$run_id" ] || [ "$run_id" == "null" ]; then
            echo "Error: Could not find any successful Linux workflow runs"
            exit 1
          fi
          
          echo "Found workflow run ID: $run_id"
          
          artifacts=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/FajoX1/fagramdesktop/actions/runs/$run_id/artifacts")
          
          artifact_id=$(echo "$artifacts" | jq '.artifacts[0].id')
          artifact_url=$(echo "$artifacts" | jq -r '.artifacts[0].archive_download_url')
          artifact_name=$(echo "$artifacts" | jq -r '.artifacts[0].name')
          
          if [ -z "$artifact_id" ] || [ "$artifact_id" == "null" ]; then
            echo "Error: Could not find any artifacts in the workflow run"
            exit 1
          fi
          
          echo "Found artifact ID: $artifact_id"
          echo "Artifact name: $artifact_name"
          echo "Artifact URL: $artifact_url"
          
          echo "Downloading artifact..."
          curl -L -o ./artifacts/artifact.zip \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "$artifact_url"
          
          echo "Download complete!"

      - name: Extract tarball from artifact
        id: extract_tarball
        run: |
          mkdir -p ${{ github.workspace }}/tarball
          
          artifact=$(find ./artifacts -type f | head -n 1)
          echo "Found artifact: $artifact"
          unzip -j "$artifact" "*.tar.gz" -d ${{ github.workspace }}/tarball/
          
          tarball=$(find ${{ github.workspace }}/tarball -name "*.tar.gz" | head -n 1)
          
          if [[ -z "$tarball" ]]; then
            echo "Error: No tarball found in the artifact" >&2
            exit 1
          fi
          
          echo "Found tarball: $tarball"
          echo "tarball_available=true" >> $GITHUB_ENV
          echo "tarball_path=$tarball" >> $GITHUB_ENV

      - name: Check for version update
        id: check_update
        if: env.tarball_available == 'true'
        run: |
          current_version=$(grep -E '^Version:' fagram.spec | awk '{print $2}' | tr -d '[:space:]')
          echo "Current version: $current_version"
          echo "Latest tag (sanitized): ${{ env.tag }}"
          if [[ "$current_version" == "${{ env.tag }}" ]]; then
            echo "The version is up-to-date."
            echo "update_needed=false" >> $GITHUB_ENV
          else
            echo "A new version is available."
            echo "update_needed=true" >> $GITHUB_ENV
          fi

      - name: Update .spec file
        if: env.update_needed == 'true' && env.tarball_available == 'true'
        run: |
          git clone https://${{ secrets.PAT }}@github.com/burhancodes/fagram-rpm repo
          cd repo
          sed -i "s/^Version:.*/Version:        ${{ env.tag }}/" fagram.spec
          git config --global user.name "burhanverse"
          git config --global user.email "contact@burhanverse.eu.org"
          git add fagram.spec tarball
          git commit -m "Updated to version ${{ env.tag }}"
          git push

  trigger-deb:
    runs-on: ubuntu-latest
    needs: update-spec
    steps:
      - name: Trigger repository dispatch event
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.DEBPAT }}
          repository: burhancodes/fagram-deb
          event-type: new-release
